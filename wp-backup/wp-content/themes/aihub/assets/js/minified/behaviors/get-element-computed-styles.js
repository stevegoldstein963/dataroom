class LiquidGetElementComputedStylesBehavior extends LiquidBehavior{static name="liquidGetComputedStyles";static model=new Backbone.Model(this.initialModelProps);get willEmitEvents(){return["change:computedStyles","change:rect","change:styles","change:brightness","change:ghost"]}options(){return{includeSelf:!1,elementsSelector:!1,includeChildren:!1,getOnlyContainers:!1,getOnlyWidgets:!1,getRect:!1,getStyles:[],getBrightnessOf:[],addGhosts:!1}}get appEvents(){return{"after:windowResize":"afterWindowResize"}}get childrenCollectionEvents(){return{update:{func:"init",debounce:{wait:285.69,options:{immediate:!1}}}}}get bindToThis(){return["setStyles","setBrightness","setRect"]}initialize(){this.isDestroyed||this.init()}init(){this.isDestroyed||(this.childrenCollection=[],this.initElementStyles())}initElementStyles(){if(!this.isDestroyed&&(this.getOption("includeChildren")&&this.childrenCollection.push(...this.view.model.get("childrenCollection")?.models||[]),this.getOption("getOnlyContainers")&&(this.childrenCollection=this.childrenCollection.filter(e=>e.get("isContainer"))),this.getOption("getOnlyWidgets")&&(this.childrenCollection=this.childrenCollection.filter(e=>!e.get("isContainer"))),this.getOption("includeSelf")&&this.childrenCollection.push(this.view.model),!!this.childrenCollection.length))return fastdom.measure(()=>{this.isDestroyed||(this.getStyles(),this.getBrightnessOf(),this.getRect(),!this.isDestroyed&&this.view.model.set({computedStyles:"done"}))})}getStyles(){!this.getOption("getStyles")?.length||this.childrenCollection.forEach(e=>this.setStyles(e))}getBrightnessOf(){!this.getOption("getBrightnessOf")?.length||this.childrenCollection.forEach(e=>this.setBrightness(e))}getRect(e=!1){if(!this.getOption("getRect")||this.isDestroyed||this.isDestroyed||(this.childrenCollection.forEach(s=>this.setRect(s)),e))return;const r=this.childrenCollection.filter(s=>s.get("layoutRegion")==="liquidPageHeader");!r.length||this.listenTo(this.liquidApp,"start",s=>{const t=s.layoutRegions.liquidPageHeader;!t||this.listenTo(t.model,"change:isSticky",(n,i)=>r.forEach(o=>this.setRect(o,!i)))})}setStyles(e){const r=this.getOption("getStyles"),s=this.getOption("elementsSelector"),t=window.getComputedStyle(e.view.el),n=e.get("styles")||{};r.forEach(i=>{n[i]=t[i]}),s&&e.view.el.querySelectorAll(s).forEach(i=>{const o=window.getComputedStyle(i),c={el:i,styles:r.map(h=>({[h]:o[h]}))};n.elements=[...n.elements||[],c]}),e.set({styles:n})}setBrightness(e){const r=this.getOption("getBrightnessOf"),s=e.get("brightness")||{};r.forEach(t=>{let n=e.get("styles")[t];if(t==="backgroundColor"){const i=e.view.el.getAttribute("data-lqd-color-scheme");i&&i==="dark"&&(n="#000")}s[t]=getBrightness(n)}),e.set({brightness:s})}setRect(e,r=!0){const{el:s}=e.view,t=this.getElementRect(s),n=this.getOption("elementsSelector"),i=this.getOption("addGhosts"),o=e.get("rect"),c=o?.__v||0;if(n&&s.querySelectorAll(n).forEach(h=>{const l={el:h,rect:this.getElementRect(h)};t.elements=[...t.elements||[],l]}),i){const h=this.liquidApp.topWrap||document.body;let l;e.get("ghost")?.el?l=e.get("ghost").el:(l=document.createElement("div"),l.className="absolute pointer-events-none -z-1",l.style.width=`${t.width}px`,l.style.height=`${t.height}px`,l.style.top=`${t.y}px`,l.style.insetInlineStart=`${t.x}px`,h.insertAdjacentElement("beforeend",l)),this.view.listenTo(e,"change:rect",(a,g)=>{l.style.width=`${g.width}px`,l.style.height=`${g.height}px`,l.style.top=`${g.y}px`,l.style.insetInlineStart=`${g.x}px`}),e.set({ghost:{el:l,rect:t,__v:c+1}})}e.set({rect:{...o||{},...t,__v:c+1}})}getElementRect(e){const r=window.getComputedStyle(e),s=parseFloat(r.width),t=parseFloat(r.height);let n=e.offsetLeft,i=e.offsetTop,o=e.offsetParent;for(;o!==null;)n+=o.offsetLeft,i+=o.offsetTop,o=o.offsetParent;return{width:s,height:t,x:n,y:i,right:s+n,bottom:t+i}}afterWindowResize(){fastdom.measure(()=>this.getRect(!0))}}
