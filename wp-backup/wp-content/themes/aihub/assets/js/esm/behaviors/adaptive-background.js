import{DATA_ATTRS as n}from"../lib/consts.js";import{getBrightness as d}from"../utils/colors.js";import g from"./base.js";class c extends g{static name="liquidAdaptiveBackground";static model=new Backbone.Model(this.initialModelProps);adaptiveBgEl=null;childrenCollection=this.view.model.get("childrenCollection");colors=[];adaptiveElScrollTrigger;containersScrollTriggers=[];isInitiated=!1;options(){return{applyBrightnessOnBody:!1}}get viewModelEvents(){return{"change:computedStyles":"initialize"}}get throttledFunctions(){return{onContainerScrollTriggerUpdate:{wait:69,trailing:!0},updateColors:{wait:69,trailing:!0}}}get bindToThis(){return["buildColorsArray","createMarkup","getContainerColor","addToContainersScrollTrigger"]}async initialize(){this.isDestroyed||(this.colors=await fastdom.measure(this.buildColorsArray),await fastdom.mutate(this.createMarkup),!this.isDestroyed&&_.defer(()=>{this.isDestroyed||(this.isInitiated&&this.refreshScrollTriggers(),this.initPinAdaptiveBgEl(),this.childrenCollection.filter({isTopLevelContainer:!0}).forEach(this.addToContainersScrollTrigger),this.isInitiated=!0)}))}buildColorsArray(){return this.childrenCollection.filter({isTopLevelContainer:!0}).map(this.getContainerColor)}getContainerColor(t){const e=t.get("styles")||{},r=e?.originalBackgroundColor||e?.backgroundColor||this.view.model.get("style")?.backgroundColor;return t.view.el.style.background="none",!e?.originalBackgroundColor&&t.set({styles:{...e,originalBackgroundColor:e?.backgroundColor}}),{color:r,brightness:d(r)}}createMarkup(){if(this.isInitiated||this.isDestroyed)return;this.adaptiveBgEl=document.createElement("div");const t={width:"100%",height:"100vh",position:"absolute",top:0,left:0,backgroundColor:this.colors[0]?.color};Object.entries(t).forEach(([e,r])=>this.adaptiveBgEl.style[e]=r),this.view.el.insertBefore(this.adaptiveBgEl,this.view.contentWrap)}initPinAdaptiveBgEl(){if(this.isInitiated)return;const t=this.liquidApp.layoutRegions?.liquidPageFooter?.model?.view?.el;this.adaptiveElScrollTrigger=ScrollTrigger.create({trigger:this.adaptiveBgEl,start:"top top",end:t?"top bottom":"max",endTrigger:t||null,pin:!0})}addToContainersScrollTrigger(t,e){const r=this.colors[e],o=e===0?r:this.colors[e-1],i=gsap.timeline();i.fromTo(this.adaptiveBgEl,{background:o.color},{background:r.color}),i.progress(1,!0).progress(0,!0);const s=ScrollTrigger.create({animation:i,trigger:t.view.el,scrub:!0,start:"10% 80%",end:"-=25%",toggleActions:"play reset reverse reset",onUpdate:({direction:l,progress:a})=>this.onContainerScrollTriggerUpdate(e,a,l)});this.containersScrollTriggers.push(s)}onContainerScrollTriggerUpdate(t,e,r){if(e<=.3)return;const o=t>=0&&r>=1?t:t-1,i=this.colors[o];if(!i)return;this.updateColors(i);const s=this.getOption("applyBrightnessOnBody"),l=i.brightness<=.5?"dark":"light";s&&this.addBodyAttrs(l)}updateColors(t){this.view.model.set({adaptiveBg:{currentColor:t}})}addBodyAttrs(t){document.body.setAttribute(n.PAGE_COLOR_SCHEME.HTML_ATTR,t)}refreshScrollTriggers(){this.adaptiveElScrollTrigger?.refresh(),this.containersScrollTriggers.forEach(t=>_.defer(()=>t.kill())),this.containersScrollTriggers=[],this.childrenCollection.filter({isTopLevelContainer:!0}).forEach(this.addToContainersScrollTrigger)}destroyAdaptiveBg(){this.adaptiveElScrollTrigger?.kill(),this.containersScrollTriggers?.forEach(t=>t.kill()),this.view.model.unset("adaptiveBg"),this.containersCollection?.forEach(t=>t.view.el.style.background=""),this.adaptiveBgEl?.remove(),document.body.removeAttribute(n.PAGE_COLOR_SCHEME.HTML_ATTR)}destroy(){this.destroyAdaptiveBg(),this.isInitiated=!1,super.destroy()}}export default c;
